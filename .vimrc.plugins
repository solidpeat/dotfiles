" --------------------------------------------------
" プラグインの設定
" --------------------------------------------------

" nerdtree
" -------------------------

" 隠しファイルを表示
let g:NERDTreeShowHidden = 1

" 引数なしで実行したとき、NERDTreeを実行する
autocmd StdinReadPre * let s:std_in = 1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" 開閉のショートカットキー
noremap <C-e> :<C-u>NERDTreeToggle<CR>

" tcomment_vim
" -------------------------

" デフォルトのキーマッピングを無効化
let tcommentMaps = 0

nmap <Leader>c  <Plug>TComment_<c-_><c-_>
vmap <Leader>c  <Plug>TComment_<c-_><c-_>
vmap <Leader>C  <Plug>TComment_<c-_>b

" vim-indent-guides
" -------------------------

" vimの起動時に有効化
let g:indent_guides_enable_on_vim_startup = 1

" ガイドの色
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg = 234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg = 236

" neocomplete.vim
" -------------------------

" vimの起動時に有効化
let g:neocomplete#enable_at_startup = 1
" 大文字が入力されるまで大文字小文字を無視
let g:neocomplete#enable_smart_case = 1

" 補完候補を選択
inoremap <expr><C-h> <Left>
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<Up>"
" 補完候補が出ていたら確定
inoremap <expr><CR> pumvisible() ? neocomplete#close_popup() : "\<CR>"

" Enable heavy omni completion.
" 何かよくわからんけんけど、これがないとOmniSharpで自動で補完されない
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\);]'

" vim-easy-align
" -------------------------

" キーマッピング
vmap <Enter> <Plug>(EasyAlign)

" vim-markdown
" -------------------------

" デフォルトのキーマッピングを無効化
let g:vim_markdown_no_default_key_mappings=1
" 見出し単位で移動
autocmd FileType markdown nmap <C-j> <Plug>(Markdown_MoveToNextHeader)
autocmd FileType markdown nmap <C-k> <Plug>(Markdown_MoveToPreviousHeader)
" 折りたたみを開閉
autocmd FileType markdown nnoremap <Leader>mo :<C-u>set nofoldenable<cr>
autocmd FileType markdown nnoremap <Leader>mc :<C-u>set foldenable<cr>

" omnisharp-vim
" -------------------------

" タイムアウト時間を長めに（しないとFindUsagesでnot foundになる）
let g:OmniSharp_timeout = 10
" プレビューウィンドウを下部に
set splitbelow

augroup omnisharp_commands
  autocmd!
  " オムニ補完（公式の例ではsetlocalだったが、そうすると1つ目のファイルで効かない）
  autocmd FileType cs set omnifunc=OmniSharp#Complete
  " 定義元へジャンプ
  autocmd FileType cs nnoremap gd :<C-u>OmniSharpGotoDefinition<cr>
  " 参照元を検索
  autocmd FileType cs nnoremap <leader>fu :<C-u>OmniSharpFindUsages<cr>
  " メソッド・プロパティ単位で移動
  autocmd FileType cs nnoremap <C-k> :<C-u>OmniSharpNavigateUp<cr>
  autocmd FileType cs nnoremap <C-j> :<C-u>OmniSharpNavigateDown<cr>
augroup END

" syntastic
" -------------------------

" ファイルを開くタイミングでチェック
let g:syntastic_check_on_open = 1
" エラー時にウィンドウを開く
let g:syntastic_auto_loc_list = 1
" エラーがあるとエラー箇所へカーソル移動
let g:syntastic_auto_jump = 1
" Javaのエラーは無視（importのとこでエラーがいっぱい出る）
let g:syntastic_ignore_files = ['\m\c\.java$']

" TweetVim
" -------------------------

nnoremap <Leader>t :<C-u>TweetVimCommandSay<CR>
